error handling

1. lets look at the type of errors that can occur

2. so let's handle these errors

    - what are the errors we cannot recover from.
    - why do we use begin end block.? to catch errors in a given context. or scope
      because the accepted practice is to only handle the errors that you intend to. (refactor with begin end)
    - use multiple rescue blocks on test.rb

3. pro-active error handling (using raise)

4. using retry
    - refactor person class to use retry

5. using ensure

6. Creating our own exception classes

    - we can pass our own error classes as Exceptions and define custom attributes to be used later.
    #
    class RetryException < RuntimeError
  attr :okToRetry
  def initialize(okToRetry)
    @okToRetry = okToRetry
  end
end
#

begin
  stuff = readData(socket)
  # .. process stuff
rescue RetryException => detail
  retry if detail.okToRetry
  raise
end

7. Exception attributes / methods

     Exception.message
     Exception.backtrace.inspect
